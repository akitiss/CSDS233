Design an algorithm to find the node X and swap it with its successor node
1. Give code.
    static stringNode partA(stringNode x){
        trav = head; //start at first node 
        while (trav != null) { //move down until reach the end 
            if (trav == x) { // ------------------- HELP WHAT??? --------------- im so CONFUSED 
                stringNode temp = x.next;
                x.next = x; 
                x.next.prev = temp;
                return x; 
            }
            trav = trav.next;
        }
    }  

2. Explain the major concept of your algorithm. 
    it loops through the list, and when it reaches x, it sets x as its own sucessor and replaces itself with its old sucessor kept in temp   
3. Give an example of running your algorithm.
    linked-list(addresses not written): [head, "wow", "bow", "hi", "yay", "okay"]
    input: partA("hi"); 
    result: returns "hi"; linked list: [head, "wow", "bow", "yay", "hi", "okay"]
    will switch the "hi" and "yay"
4. Give and justify its runtime.
    runtime O(n). it'll take O(n) time to find the node X. and it'll take O(1) time to swap node x and its sucessor node
